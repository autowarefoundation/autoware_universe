%%{init: {
    "flowchart": {
        "defaultRenderer": "elk",
        "wrappingWidth": "600"
    }}
}%%
flowchart LR
    subgraph Inputs
        Trajectory[Ego Trajectory]
        State[Ego State]
        Info[Vehicle Info]
        Map[Vector Map]
    end
    subgraph Module[Module data]
        Parameters
        tracker[Decision Tracker]
    end


    Trajectory -- ego poses along the trajectory--> ego_footprint
    Info -- footprint dimensions--> ego_footprint
    Map -- linestring and polygons --> map_data --> filter_objects

    Trajectory -- predicted times when ego reaches each point --> Collisions
    filter_objects -- predicted path footprints --> Collisions
    ego_footprint --> Collisions

    Collisions --> Decisions
    %% filter_objects --> Decisions
    tracker <-- to get and update the decision history of each object--> Decisions

    Decisions --> Slowdowns
    tracker -- to get the current decision for each object --> Slowdowns
    Trajectory -- to interpolate poses on the trajectory --> Slowdowns
    State -- to calculate nearest deceleration pose --> Slowdowns


    subgraph ego_footprint[Ego Footprint]
        EgoFP[Calculate footprint] -->
        EgoRtree[Construct Rtree for efficient space queries]
    end

    subgraph map_data["Map filtering data"]
        subgraph mad_data_for_each["(for each object class)"]
            Segments[Segments to cut predicted paths]
            Poly[Polygons where objects are ignored]
        end
    end

    subgraph filter_objects[Filtered Objects]
        subgraph filter["(for each object)"]
            direction TB
            classify[Classify Objects] --> IgnoreObj[Ignore objects]
            --> ObjFP[Calculate footprints]
            --> IgnorePath[Filter predicted paths<br/>ignore or cut]
        end
    end

    subgraph Collisions
        subgraph CollForEachObj["(for each object)"]
            direction TB
            inter[Intersections between object and ego footprints]
            --> time_intervals[Overlap time intervals]
            --> Coll["Collision type (ego pass first with/without collision, collision, no collision)"]
        end
    end

    subgraph Decisions
        subgraph DecForEach["(for each collision / object)"]
            direction TB
            calcDecType["Calculate decision type (stop, slow, nothing)"]
            --> UpdateDec["Update decision towards the object (stop > slowdown > nothing)"]
            --> UpdateTracker["Update the decision tracker with the new decisions"]
        end
    end

    subgraph Slowdowns
        subgraph SlowForEach["(for each object)"]
            direction LR
            currDecision["Retrieve current decision"]
            currDecision --> calcStop["If stop decision: calculate stop pose"]
            currDecision --> calcSlow["If slowdown decision: calculate slowdown interval"]
        end
    end
    classDef Title font-size:18pt;
    class Inputs,filter_objects,Slowdowns,Decisions,Collisions,map_data,ego_footprint,Module Title;
